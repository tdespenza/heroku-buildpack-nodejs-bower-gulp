#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

# Look in package.json's engines.node field for a semver range
semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$PATH:$build_dir/vendor/node/bin

status "Downloading and installing npm"
npm install -g npm@latest > /dev/null 2>&1 | indent

vendor_dir="$build_dir/vendor2" #cached vendor dir

if [ -d $cache_dir/node/vendor/nasm ]; then
  status "Copying nasm from cache"
  cp -r $cache_dir/node/vendor/nasm $vendor_dir
else
  status "Installing nasm from source"
  NVERSION="2.11"
  curl http://www.nasm.us/pub/nasm/releasebuilds/$NVERSION/nasm-$NVERSION.tar.gz -s | tar xz
  cd nasm-$NVERSION
  ./configure >/dev/null 2>&1 && make >/dev/null 2>&1
  
  mkdir -p $vendor_dir/nasm/bin
  mv nasm $vendor_dir/nasm/bin
  chmod +x $vendor_dir/nasm/bin/*
fi
PATH=$PATH:$vendor_dir/nasm/bin


# Run subsequent node/npm commands from the build path
cd $build_dir



# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if [ -d $build_dir/node_modules ]; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif [ -d $cache_dir/node/node_modules ]; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent
  
  #prune will delete the bower / gulp modules, this adds it back
  if [ -d $cache_dir/node/node_modules/bower ]; then
    status "Copying bower from cache"
    cp -r $cache_dir/node/node_modules/bower $build_dir/node_modules
    cp -r $cache_dir/node/node_modules/.bin/bower $build_dir/node_modules/.bin
  fi
  if [ -d $cache_dir/node/node_modules/gulp ]; then
  status "Copying gulp from cache"
    cp -r $cache_dir/node/node_modules/gulp $build_dir/node_modules
    cp -r $cache_dir/node/node_modules/.bin/gulp $build_dir/node_modules/.bin
  fi

  if [ -f $cache_dir/node/.heroku/node-version ] && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi

fi

# Decide if we will be looking at bower dependencies as well
if [ -f $build_dir/bower.json ]; then
  use_bower=yes

  if [ -f $build_dir/.bowerrc ]; then
    bower_dir=$(cat $build_dir/.bowerrc | $bp_dir/vendor/jq -r .directory)
    if [ "$bower_dir" == "null" ]; then
      unset bower_dir
    fi
  fi
  bower_dir=${bower_dir:=bower_components}

  status "Found bower.json - Updating bower locally"
  
  if [ -e node_modules/.bin/bower ]; then
    npm update bower 2>&1 | indent
  else
    npm install bower 2>&1 | indent
  fi

  # Copy cached bower_components back into the build tree and prune unless
  # the directory is checked in already
  if [ -d $build/$bower_dir ]; then
    status "Found existing $bower_dir directory; skipping bower cache"
  elif [ -d $cache_dir/node/bower_components ]; then
    status "Restoring $bower_dir directory from cache"
    cp -r $cache_dir/node/bower_components $build_dir/$bower_dir

    status "Pruning cached dependencies not specified in bower.json"
    node_modules/.bin/bower prune 2>&1 | indent
  fi

fi




# Scope config var availability only to `npm install` & `bower install`
(
  if [ -d "$env_dir" ]; then
    status "Exporting config vars to environment"
    export_env_dir $env_dir
  fi

  status "Installing npm dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --userconfig $build_dir/.npmrc 2>&1 | indent

  if [ $use_bower ]; then
    status "Installing bower dependencies"
    node_modules/.bin/bower install 2>&1 | indent
  fi
)

# Persist goodies like node-version in the slug
mkdir -p $build_dir/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $build_dir/.heroku/node-version

# If Procfile is absent, try to create one using `npm start`
if [ ! -e $build_dir/Procfile ]; then
  npm_start=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .scripts.start)

  # If `scripts.start` is set in package.json, or a server.js file
  # is present in the app root, then create a default Procfile
  if [ "$npm_start" != "null" ]; then
    status "No Procfile found; Adding 'npm start' to new Procfile"
    echo "web: npm start" > $build_dir/Procfile
  elif  [ -f $build_dir/server.js ]; then
    status "No Procfile found; Adding 'node server.js' to new Procfile"
    echo "web: node server.js" > $build_dir/Procfile
  elif  [ -f $build_dir/app.js ]; then
    status "No Procfile found; Adding 'node app.js' to new Procfile"
    echo "web: node app.js" > $build_dir/Procfile
  else
    status "Procfile not found and npm start script is undefined"
    protip "Create a Procfile or specify a start script in package.json"
  fi
fi

# Update the PATH
status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh

# Check and run gulp
(
  if [ -f $build_dir/gulpfile.js ]; then
    # get the env vars
    if [ -d "$env_dir" ]; then
      status "Exporting config vars to environment"
      export_env_dir $env_dir
    fi

    # Install gulp locally
    status "Updating gulp locally"
    if [ -e node_modules/.bin/gulp ]; then
      npm update gulp 2>&1 | indent
    else
      npm install gulp 2>&1 | indent
    fi
    
    if [ -n "$GULP_TASK" ]; then
      status "Found gulpfile, running gulp $GULP_TASK task"
      $build_dir/node_modules/.bin/gulp $GULP_TASK
    else
      status "Found gulpfile, running gulp build task"
      $build_dir/node_modules/.bin/gulp build
    fi
  else
    status "No gulpfile found"
  fi
)

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
rm -rf $cache_dir/node
mkdir -p $cache_dir/node

# If app has a node_modules directory, cache it.
if [ -d $build_dir/node_modules ]; then
  status "Caching node_modules directory for future builds"
  cp -r $build_dir/node_modules $cache_dir/node
fi

# Also cache a $bower_dir if present
if [ $use_bower ]; then
  if [ -d $build_dir/$bower_dir ]; then
    status "Caching $bower_dir directory for future builds"
    cp -r $build_dir/$bower_dir/. $cache_dir/node/bower_components
  fi
fi
# Also cache any compiled dependencies
if [ -e $vendor_dir ]; then
  status "Caching vendor directory for future builds"
  cp -r $vendor_dir/. $cache_dir/node/vendor
fi

# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/node

#status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

# Post package.json to nomnom service
# Use a subshell so failures won't break the build.
(
  curl \
    --data @$build_dir/package.json \
    --fail \
    --silent \
    --request POST \
    --header "content-type: application/json" \
    https://nomnom.heroku.com/?request_id=$REQUEST_ID \
    > /dev/null
) &

JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-"https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz"}
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}... "
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

export GRADLE_USER_HOME=$CACHE_DIR/.gradle

if [ ! -f $BUILD_DIR/gradlew ] ; then
  echo "-----> Installing Gradle Wrapper..."
  echo "       WARNING: Your application does not have it's own gradlew file."
  echo "       We'll install one for you, but this is a deprecated feature and"
  echo "       in the future may not be supported."
  cp -rn ${OPT_DIR}/wrapper/* ${BUILD_DIR}
fi
BUILDCMD="./gradlew"
chmod +x ${BUILD_DIR}/gradlew

BUILDCMD="$BUILDCMD $GRADLE_TASK"

cd $BUILD_DIR

# build app
echo "-----> Building Gradle app..."
echo "       WARNING: The Gradle buildpack is currently in Beta."
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi
